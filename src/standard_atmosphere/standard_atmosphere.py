# Import modules here
import numpy as np
import sys
from scipy.interpolate import interp1d
# =============================================================================================
# =============================================================================================
# Date:      February 23, 2018
# Purpose:   This code contains functions required for the 1976 implementation of the
#            Standard Atmosphere model, ref. 1

# Source Code Metadata
__author__ = "Jonathan A. Webb"
__copyright__ = "Copyright 2017, Jon Webb Inc."
__version__ = "1.0"
# =============================================================================================
# =============================================================================================


class StandardAtmosphere:
    """This class will calculate atmospheric parameters of interest in accordance with the \
    1976 U.S. Atmospheric Standard [1]_.

    `Input Parameters:`

    * units : char
              The unit of measurments for input and output variables "SI" \
              for units of meters, kilograms, and seconds, "IMPERIAL" for \
              units of feet, points, and seconds

    .. [1] "U.S. Standard Atmosphere, 1976," National Aeronautics and Space Administration \
    NASA-TM-X-74335, 1976
    """
    def __init__(self):
        # private variables
        self.__sea_level_gravity = 9.80665  # m/s2 as defined by page 8 of Ref 1
        self.__earth_radius = 6.356766e6  # - m as defined on page 2 of Ref. 1 and page
        self.__RStar = 8.31432e3  # N-m/(kmol-K)
        self.__Avagadros_Number = 6.022169e26  # 1/kmol

        # - Values come from page 3 or Reference 1 and are incorporated here to encapsulate
        #   variables
        self.__geoP_height_threshold = np.array([0, 11000.0, 20000.0, 32000.0, 47000.0, 51000.0,
                                                 71000.0, 84852.05, 92321.0])  # meters
        self.__gradient = np.array([-0.0065, 0.0, 0.001, 0.0028, 0.0, -0.0028, -0.002, 0.0])  # K/m
        self.__to = np.array([288.15, 216.65, 216.65, 228.65,
                              270.65, 270.65, 214.65, 186.946])  # K
        self.__po = np.array([101325.0, 22632.30, 5474.80, 868.01, 110.90, 66.94,
                              3.96])  # Pa
# ---------------------------------------------------------------------------------------------
# Molecular densities and altitude
# Values from from Table VIII of ref. 1
        self.__altitude = np.array([86000.0, 86500.0, 87000.0, 87500.0, 88000.0, 88500.0,
                                    89000.0, 89500.0, 90000.0, 90500.0, 91000.0, 91500.0,
                                    92000.0, 92500.0, 93000.0, 93500.0, 94000.0, 94500.0,
                                    95000.0, 95500.0, 96000.0, 96500.0, 97000.0, 97500.0,
                                    98000.0, 98500.0, 99000.0, 99500.0, 100000.0, 101000.0,
                                    102000.0, 103000.0, 104000.0, 105000.0, 106000.0, 107000.0,
                                    108000.0, 109000.0, 110000.0, 111000.0, 112000.0, 113000.0,
                                    114000.0, 115000.0, 116000.0, 117000.0, 118000.0, 119000.0,
                                    120000.0, 121000.0, 122000.0, 123000.0, 124000.0, 125000.0,
                                    126000.0, 127000.0, 128000.0, 129000.0, 130000.0, 131000.0,
                                    132000.0, 133000.0, 134000.0, 135000.0, 136000.0, 137000.0,
                                    138000.0, 139000.0, 140000.0, 141000.0, 142000.0, 143000.0,
                                    144000.0, 145000.0, 146000.0, 147000.0, 148000.0, 149000.0,
                                    150000.0, 151000.0, 152000.0, 153000.0, 154000.0, 155000.0,
                                    156000.0, 157000.0, 158000.0, 159000.0, 160000.0, 161000.0,
                                    162000.0, 163000.0, 164000.0, 165000.0, 166000.0, 167000.0,
                                    168000.0, 169000.0, 170000.0, 171000.0, 172000.0, 173000.0,
                                    174000.0, 175000.0, 176000.0, 177000.0, 178000.0, 179000.0,
                                    180000.0, 181000.0, 182000.0, 183000.0, 184000.0, 185000.0,
                                    186000.0, 187000.0, 188000.0, 189000.0, 190000.0, 191000.0,
                                    192000.0, 193000.0, 194000.0, 195000.0, 196000.0, 197000.0,
                                    198000.0, 199000.0, 200000.0, 201000.0, 202000.0, 203000.0,
                                    204000.0, 205000.0, 206000.0, 207000.0, 208000.0, 209000.0,
                                    210000.0, 211000.0, 212000.0, 213000.0, 214000.0, 215000.0,
                                    216000.0, 217000.0, 218000.0, 219000.0, 220000.0, 221000.0,
                                    222000.0, 223000.0, 224000.0, 225000.0, 226000.0, 227000.0,
                                    228000.0, 229000.0, 230000.0, 231000.0, 232000.0, 233000.0,
                                    234000.0, 235000.0, 236000.0, 237000.0, 238000.0, 239000.0,
                                    240000.0, 241000.0, 242000.0, 243000.0, 244000.0, 245000.0,
                                    246000.0, 247000.0, 248000.0, 249000.0, 250000.0, 251000.0,
                                    252000.0, 253000.0, 254000.0, 255000.0, 256000.0, 257000.0,
                                    258000.0, 259000.0, 260000.0, 261000.0, 262000.0, 263000.0,
                                    264000.0, 265000.0, 266000.0, 267000.0, 268000.0, 269000.0,
                                    270000.0, 271000.0, 272000.0, 273000.0, 274000.0, 275000.0,
                                    276000.0, 277000.0, 278000.0, 279000.0, 280000.0, 281000.0,
                                    282000.0, 283000.0, 284000.0, 285000.0, 286000.0, 287000.0,
                                    288000.0, 289000.0, 290000.0, 291000.0, 292000.0, 293000.0,
                                    294000.0, 295000.0, 296000.0, 297000.0, 298000.0, 299000.0,
                                    300000.0, 302000.0, 304000.0, 306000.0, 308000.0, 310000.0,
                                    312000.0, 314000.0, 316000.0, 318000.0, 320000.0, 322000.0,
                                    324000.0, 326000.0, 328000.0, 330000.0, 332000.0, 334000.0,
                                    336000.0, 338000.0, 340000.0, 342000.0, 344000.0, 346000.0,
                                    348000.0, 350000.0, 352000.0, 354000.0, 356000.0, 358000.0,
                                    360000.0, 362000.0, 364000.0, 366000.0, 368000.0, 370000.0,
                                    372000.0, 374000.0, 376000.0, 378000.0, 380000.0, 382000.0,
                                    384000.0, 386000.0, 388000.0, 390000.0, 392000.0, 394000.0,
                                    396000.0, 398000.0, 400000.0, 402000.0, 404000.0, 406000.0,
                                    408000.0, 410000.0, 412000.0, 414000.0, 416000.0, 418000.0,
                                    420000.0, 422000.0, 424000.0, 426000.0, 428000.0, 430000.0,
                                    432000.0, 434000.0, 436000.0, 438000.0, 440000.0, 442000.0,
                                    444000.0, 446000.0, 448000.0, 450000.0, 452000.0, 454000.0,
                                    456000.0, 458000.0, 460000.0, 462000.0, 464000.0, 466000.0,
                                    468000.0, 470000.0, 472000.0, 474000.0, 476000.0, 478000.0,
                                    480000.0, 482000.0, 484000.0, 486000.0, 488000.0, 490000.0,
                                    492000.0, 494000.0, 496000.0, 498000.0, 500000.0, 505000.0,
                                    510000.0, 515000.0, 520000.0, 525000.0, 530000.0, 535000.0,
                                    540000.0, 545000.0, 550000.0, 555000.0, 560000.0, 565000.0,
                                    570000.0, 575000.0, 580000.0, 585000.0, 590000.0, 595000.0,
                                    600000.0, 605000.0, 610000.0, 615000.0, 620000.0, 625000.0,
                                    630000.0, 635000.0, 640000.0, 645000.0, 650000.0, 655000.0,
                                    660000.0, 665000.0, 670000.0, 675000.0, 680000.0, 685000.0,
                                    690000.0, 695000.0, 700000.0, 705000.0, 710000.0, 715000.0,
                                    720000.0, 725000.0, 730000.0, 735000.0, 740000.0, 745000.0,
                                    750000.0, 755000.0, 760000.0, 765000.0, 770000.0, 775000.0,
                                    780000.0, 785000.0, 790000.0, 795000.0, 800000.0, 805000.0,
                                    810000.0, 815000.0, 820000.0, 825000.0, 830000.0, 835000.0,
                                    840000.0, 845000.0, 850000.0, 855000.0, 860000.0, 865000.0,
                                    870000.0, 875000.0, 880000.0, 885000.0, 890000.0, 895000.0,
                                    900000.0, 905000.0, 910000.0, 915000.0, 920000.0, 925000.0,
                                    930000.0, 935000.0, 940000.0, 945000.0, 950000.0, 955000.0,
                                    960000.0, 965000.0, 970000.0, 975000.0, 980000.0, 985000.0,
                                    990000.0, 995000.0, 1000000.0])

        self.__n2 = np.array([1.130e20, 1.034e20, 9.456e19, 8.651e19, 7.915e19, 7.242e19,
                              6.626e19, 6.062e19, 5.547e19, 5.075e19, 4.643e19, 4.248e19,
                              3.886e19, 3.553e19, 3.249e19, 2.970e19, 2.715e19, 2.481e19,
                              2.268e19, 2.072e19, 1.894e19, 1.730e19, 1.581e19, 1.445e19,
                              1.320e19, 1.206e19, 1.102e19, 1.008e19, 9.210e18, 7.740e18,
                              6.508e18, 5.475e18, 4.609e18, 3.883e18, 3.273e18, 2.760e18,
                              2.327e18, 1.959e18, 1.641e18, 1.373e18, 1.158e18, 9.841e17,
                              8.422e17, 7.254e17, 6.285e17, 5.475e17, 4.794e17, 4.217e17,
                              3.726e17, 3.306e17, 2.947e17, 2.637e17, 2.368e17, 2.135e17,
                              1.930e17, 1.750e17, 1.592e17, 1.451e17, 1.326e17, 1.215e17,
                              1.116e17, 1.026e17, 9.460e16, 8.735e16, 8.080e16, 7.487e16,
                              6.947e16, 6.456e16, 6.009e16, 5.600e16, 5.225e16, 4.881e16,
                              4.565e16, 4.275e16, 4.007e16, 3.760e16, 3.531e16, 3.320e16,
                              3.124e16, 2.942e16, 2.773e16, 2.616e16, 2.469e16, 2.333e16,
                              2.206e16, 2.087e16, 1.975e16, 1.871e16, 1.774e16, 1.682e16,
                              1.596e16, 1.516e16, 1.440e16, 1.369e16, 1.302e16, 1.239e16,
                              1.179e16, 1.123e16, 1.070e16, 1.020e16, 9.724e15, 9.277e15,
                              8.853e15, 8.452e15, 8.072e15, 7.712e15, 7.371e15, 7.047e15,
                              6.740e15, 6.448e15, 6.170e15, 5.907e15, 5.656e15, 5.417e15,
                              5.190e15, 4.974e15, 4.768e15, 4.572e15, 4.385e15, 4.207e15,
                              4.037e15, 3.875e15, 3.720e15, 3.572e15, 3.430e15, 3.295e15,
                              3.166e15, 3.043e15, 2.925e15, 2.812e15, 2.704e15, 2.601e15,
                              2.502e15, 2.407e15, 2.316e15, 2.229e15, 2.146e15, 2.066e15,
                              1.989e15, 1.915e15, 1.845e15, 1.777e15, 1.712e15, 1.650e15,
                              1.590e15, 1.533e15, 1.477e15, 1.424e15, 1.373e15, 1.324e15,
                              1.277e15, 1.232e15, 1.188e15, 1.147e15, 1.106e15, 1.068e15,
                              1.030e15, 9.945e14, 9.600e14, 9.268e14, 8.948e14, 8.640e14,
                              8.343e14, 8.058e14, 7.782e14, 7.517e14, 7.262e14, 7.016e14,
                              6.778e14, 6.550e14, 6.329e14, 6.117e14, 5.912e14, 5.714e14,
                              5.523e14, 5.339e14, 5.162e14, 4.991e14, 4.826e14, 4.666e14,
                              4.512e14, 4.364e14, 4.221e14, 4.082e14, 3.949e14, 3.820e14,
                              3.695e14, 3.575e14, 3.459e14, 3.347e14, 3.238e14, 3.134e14,
                              3.033e14, 2.935e14, 2.841e14, 2.749e14, 2.661e14, 2.576e14,
                              2.494e14, 2.414e14, 2.337e14, 2.263e14, 2.191e14, 2.121e14,
                              2.054e14, 1.989e14, 1.926e14, 1.865e14, 1.806e14, 1.750e14,
                              1.695e14, 1.641e14, 1.590e14, 1.540e14, 1.492e14, 1.445e14,
                              1.400e14, 1.356e14, 1.314e14, 1.273e14, 1.234e14, 1.195e14,
                              1.158e14, 1.122e14, 1.088e14, 1.054e14, 1.021e14, 9.898e13,
                              9.593e13, 9.011e13, 8.466e13, 7.954e13, 7.474e13, 7.024e13,
                              6.602e13, 6.206e13, 5.834e13, 5.485e13, 5.158e13, 4.850e13,
                              4.561e13, 4.290e13, 4.035e13, 3.796e13, 3.571e13, 3.360e13,
                              3.162e13, 2.975e13, 2.800e13, 2.635e13, 2.480e13, 2.335e13,
                              2.198e13, 2.069e13, 1.948e13, 1.834e13, 1.727e13, 1.627e13,
                              1.532e13, 1.443e13, 1.359e13, 1.280e13, 1.206e13, 1.136e13,
                              1.070e13, 1.008e13, 9.498e12, 8.950e12, 8.434e12, 7.948e12,
                              7.490e12, 7.059e12, 6.653e12, 6.271e12, 5.911e12, 5.572e12,
                              5.253e12, 4.952e12, 4.669e12, 4.402e12, 4.151e12, 3.914e12,
                              3.691e12, 3.480e12, 3.282e12, 3.095e12, 2.919e12, 2.754e12,
                              2.597e12, 2.450e12, 2.311e12, 2.180e12, 2.057e12, 1.940e12,
                              1.831e12, 1.727e12, 1.630e12, 1.538e12, 1.451e12, 1.369e12,
                              1.292e12, 1.220e12, 1.151e12, 1.086e12, 1.025e12, 9.679e11,
                              9.136e11, 8.625e11, 8.142e11, 7.686e11, 7.256e11, 6.851e11,
                              6.468e11, 6.107e11, 5.766e11, 5.445e11, 5.142e11, 4.885e11,
                              4.585e11, 4.330e11, 4.090e11, 3.863e11, 3.648e11, 3.446e11,
                              3.255e11, 3.075e11, 2.904e11, 2.744e11, 2.592e11, 2.249e11,
                              1.951e11, 1.694e11, 1.470e11, 1.277e11, 1.109e11, 9.633e10,
                              8.370e10, 7.274e10, 6.323e10, 5.497e10, 4.781e10, 4.158e10,
                              3.617e10, 3.148e10, 2.740e10, 2.385e10, 2.076e10, 1.808e10,
                              1.575e10, 1.372e10, 1.196e10, 1.042e10, 9.085e9, 7.921e9, 6.908e9,
                              6.025e9, 5.257e9, 4.587e9, 4.003e9, 3.495e9, 3.051e9, 2.665e9,
                              2.327e9, 2.033e9, 1.777e9, 1.553e9, 1.357e9, 1.187e9, 1.038e9,
                              9.075e8, 7.939e8, 6.946e8, 6.078e8, 5.320e8, 4.658e8, 4.078e8,
                              3.572e8, 3.129e8, 2.741e8, 2.402e8, 2.105e8, 1.845e8, 1.618e8,
                              1.419e8, 1.244e8, 1.092e8, 9.577e7, 8.404e7, 7.377e7, 6.476e7,
                              5.686e7, 4.993e7, 4.386e7, 3.853e7, 3.386e7, 2.975e7, 2.615e7,
                              2.299e7, 2.022e7, 1.778e7, 1.564e7, 1.376e7, 1.211e7, 1.066e7,
                              9.380e6, 8.258e6, 7.271e6, 6.404e6, 5.641e6, 4.970e6, 4.379e6,
                              3.859e6, 3.402e6, 2.999e6, 2.645e6, 2.332e6, 2.057e6, 1.815e6,
                              1.602e6, 1.414e6, 1.248e6, 1.102e6, 9.726e5, 8.590e5, 7.587e5,
                              6.703e5, 5.992e5, 5.234e5, 4.626e5])

        self.__o = np.array([8.600e16, 9.939e16, 1.147e17, 1.320e17, 1.513e17, 1.724e17,
                             1.952e17, 2.193e17, 2.443e17, 2.699e17, 2.953e17, 3.200e17,
                             3.434e17, 3.651e17, 3.846e17, 4.016e17, 4.159e17, 4.275e17,
                             4.365e17, 4.429e17, 4.471e17, 4.493e17, 4.500e17, 4.494e17,
                             4.476e17, 4.447e17, 4.408e17, 4.358e17, 4.298e17, 4.168e17,
                             4.007e17, 3.821e17, 3.619e17, 3.406e17, 3.188e17, 2.968e17,
                             2.748e17, 2.528e17, 2.303e17, 2.083e17, 1.889e17, 1.718e17,
                             1.565e17, 1.428e17, 1.305e17, 1.194e17, 1.096e17, 1.007e17,
                             9.275e16, 8.562e16, 7.925e16, 7.354e16, 6.840e16, 6.376e16,
                             5.956e16, 5.576e16, 5.229e16, 4.914e16, 4.625e16, 4.361e16,
                             4.118e16, 3.894e16, 3.688e16, 3.497e16, 3.320e16, 3.156e16,
                             3.004e16, 2.862e16, 2.729e16, 2.605e16, 2.489e16, 2.380e16,
                             2.278e16, 2.183e16, 2.092e16, 2.007e16, 1.927e16, 1.852e16,
                             1.780e16, 1.712e16, 1.648e16, 1.587e16, 1.530e16, 1.475e16,
                             1.423e16, 1.373e16, 1.326e16, 1.281e16, 1.238e16, 1.197e16,
                             1.158e16, 1.120e16, 1.085e16, 1.050e16, 1.018e16, 9.863e15,
                             9.562e15, 9.273e15, 8.996e15, 8.730e15, 8.474e15, 8.228e15,
                             7.992e15, 7.765e15, 7.546e15, 7.335e15, 7.132e15, 6.936e15,
                             6.747e15, 6.565e15, 6.389e15, 6.220e15, 6.056e15, 5.897e15,
                             5.744e15, 5.596e15, 5.453e15, 5.315e15, 5.181e15, 5.051e15,
                             4.926e15, 4.804e15, 4.686e15, 4.572e15, 4.461e15, 4.354e15,
                             4.249e15, 4.148e15, 4.050e15, 3.955e15, 3.862e15, 3.773e15,
                             3.685e15, 3.600e15, 3.518e15, 3.438e15, 3.360e15, 3.284e15,
                             3.211e15, 3.139e15, 3.069e15, 3.001e15, 2.935e15, 2.871e15,
                             2.808e15, 2.747e15, 2.688e15, 2.630e15, 2.573e15, 2.518e15,
                             2.465e15, 2.412e15, 2.361e15, 2.312e15, 2.263e15, 2.216e15,
                             2.170e15, 2.125e15, 2.081e15, 2.038e15, 1.996e15, 1.955e15,
                             1.915e15, 1.876e15, 1.838e15, 1.801e15, 1.765e15, 1.729e15,
                             1.695e15, 1.661e15, 1.628e15, 1.595e15, 1.564e15, 1.533e15,
                             1.503e15, 1.437e15, 1.444e15, 1.416e15, 1.388e15, 1.361e15,
                             1.335e15, 1.309e15, 1.284e15, 1.259e15, 1.235e15, 1.211e15,
                             1.188e15, 1.165e15, 1.143e15, 1.121e15, 1.100e15, 1.079e15,
                             1.059e15, 1.039e15, 1.019e15, 9.998e14, 9.811e14, 9.627e14,
                             9.447e14, 9.270e14, 9.097e14, 8.928e14, 8.762e14, 8.599e14,
                             8.440e14, 8.284e14, 8.131e14, 7.981e14, 7.834e14, 7.691e14,
                             7.549e14, 7.411e14, 7.276e14, 7.143e14, 7.012e14, 6.885e14,
                             6.759e14, 6.637e14, 6.516e14, 6.398e14, 6.282e14, 6.169e14,
                             6.058e14, 5.948e14, 5.841e14, 5.736e14, 5.633e14, 5.532e14,
                             5.433e14, 5.241e14, 5.055e14, 4.877e14, 4.705e14, 4.540e14,
                             4.380e14, 4.227e14, 4.079e14, 3.937e14, 3.800e14, 3.668e14,
                             3.541e14, 3.418e14, 3.300e14, 3.186e14, 3.076e14, 2.970e14,
                             2.868e14, 2.770e14, 2.675e14, 2.583e14, 2.495e14, 2.410e14,
                             2.328e14, 2.249e14, 2.172e14, 2.099e14, 2.027e14, 1.959e14,
                             1.893e14, 1.829e14, 1.767e14, 1.707e14, 1.650e14, 1.594e14,
                             1.541e14, 1.489e14, 1.439e14, 1.391e14, 1.344e14, 1.300e14,
                             1.256e14, 1.214e14, 1.174e14, 1.135e14, 1.097e14, 1.061e14,
                             1.025e14, 9.913e13, 9.584e13, 9.267e13, 8.960e13, 8.664e13,
                             8.378e13, 8.101e13, 7.834e13, 7.576e13, 7.327e13, 7.086e13,
                             6.853e13, 6.628e13, 6.410e13, 6.200e13, 5.997e13, 5.800e13,
                             5.611e13, 5.427e13, 5.250e13, 5.079e13, 4.913e13, 4.753e13,
                             4.598e13, 4.448e13, 4.303e13, 4.164e13, 4.028e13, 3.898e13,
                             3.771e13, 3.649e13, 3.531e13, 3.416e13, 3.306e13, 3.199e13,
                             3.096e13, 2.996e13, 2.899e13, 2.806e13, 2.715e13, 2.628e13,
                             2.543e13, 2.461e13, 2.382e13, 2.306e13, 2.232e13, 2.160e13,
                             2.091e13, 2.024e13, 1.959e13, 1.896e13, 1.836e13, 1.693e13,
                             1.561e13, 1.440e13, 1.328e13, 1.225e13, 1.130e13, 1.043e13,
                             9.624e12, 8.883e12, 8.200e12, 7.570e12, 6.989e12, 6.454e12,
                             5.960e12, 5.505e12, 5.085e12, 4.698e12, 4.341e12, 4.011e12,
                             3.707e12, 3.426e12, 3.167e12, 2.928e12, 2.707e12, 2.503e12,
                             2.315e12, 2.141e12, 1.981e12, 1.832e12, 1.695e12, 1.569e12,
                             1.452e12, 1.344e12, 1.244e12, 1.151e12, 1.066e12, 9.870e11,
                             9.140e11, 8.465e11, 7.840e11, 7.263e11, 6.728e11, 6.234e11,
                             5.777e11, 5.354e11, 4.962e11, 4.599e11, 4.264e11, 3.953e11,
                             3.666e11, 3.399e11, 3.153e11, 2.924e11, 2.712e11, 2.516e11,
                             2.335e11, 2.166e11, 2.011e11, 1.866e11, 1.732e11, 1.608e11,
                             1.493e11, 1.386e11, 1.287e11, 1.195e11, 1.110e11, 1.031e11,
                             9.580e10, 8.901e10, 8.270e10, 7.685e10, 7.142e10, 6.638e10,
                             6.171e10, 5.737e10, 5.334e10, 4.959e10, 4.612e10, 4.289e10,
                             3.989e10, 3.711e10, 3.452e10, 3.212e10, 2.989e10, 2.781e10,
                             2.588e10, 2.409e10, 2.242e10, 2.088e10, 1.944e10, 1.810e10,
                             1.685e10, 1.569e10, 1.462e10, 1.362e10, 1.268e10, 1.182e10,
                             1.101e10, 1.026e10, 9.562e9])

        self.__o2 = np.array([3.031e19, 2.772e19, 2.535e19, 2.319e19, 2.120e19, 1.938e19,
                              1.772e19, 1.619e19, 1.479e19, 1.351e19, 1.234e19, 1.126e19,
                              1.027e19, 9.361e18, 8.527e18, 7.761e18, 7.060e18, 6.418e18,
                              5.830e18, 5.293e18, 4.801e18, 4.353e18, 3.943e18, 3.570e18,
                              3.230e18, 2.920e18, 2.639e18, 2.383e18, 2.151e18, 1.756e18,
                              1.430e18, 1.163e18, 9.434e17, 7.645e17, 6.189e17, 5.005e17,
                              4.045e17, 3.263e17, 2.621e17, 2.104e17, 1.706e17, 1.398e17,
                              1.156e17, 9.646e16, 8.120e16, 6.891e16, 5.892e16, 5.072e16,
                              4.395e16, 3.832e16, 3.360e16, 2.963e16, 2.625e16, 2.336e16,
                              2.087e16, 1.871e16, 1.683e16, 1.519e16, 1.375e16, 1.247e16,
                              1.134e16, 1.034e16, 9.444e15, 8.645e15, 7.927e15, 7.283e15,
                              6.702e15, 6.177e15, 5.702e15, 5.272e15, 4.881e15, 4.524e15,
                              4.199e15, 3.903e15, 3.631e15, 3.382e15, 3.153e15, 2.943e15,
                              2.750e15, 2.572e15, 2.407e15, 2.255e15, 2.114e15, 1.984e15,
                              1.863e15, 1.751e15, 1.647e15, 1.550e15, 1.460e15, 1.376e15,
                              1.297e15, 1.224e15, 1.156e15, 1.092e15, 1.032e15, 9.757e14,
                              9.232e14, 8.739e14, 8.277e14, 7.843e14, 7.435e14, 7.051e14,
                              6.690e14, 6.350e14, 6.030e14, 5.728e14, 5.442e14, 5.174e14,
                              4.921e14, 4.681e14, 4.455e14, 4.241e14, 4.039e14, 3.847e14,
                              3.666e14, 3.494e14, 3.331e14, 3.177e14, 3.031e14, 2.892e14,
                              2.760e14, 2.635e14, 2.517e14, 2.404e14, 2.297e14, 2.195e14,
                              2.098e14, 2.006e14, 1.918e14, 1.834e14, 1.755e14, 1.679e14,
                              1.607e14, 1.538e14, 1.473e14, 1.410e14, 1.351e14, 1.294e14,
                              1.239e14, 1.188e14, 1.138e14, 1.091e14, 1.046e14, 1.003e14,
                              9.617e13, 9.224e13, 8.848e13, 8.489e13, 8.145e13, 7.816e13,
                              7.502e13, 7.201e13, 6.913e13, 6.637e13, 6.373e13, 6.121e13,
                              5.879e13, 5.647e13, 5.425e13, 5.212e13, 5.009e13, 4.813e13,
                              4.626e13, 4.446e13, 4.274e13, 4.109e13, 3.951e13, 3.799e13,
                              3.653e13, 3.513e13, 3.379e13, 3.251e13, 3.127e13, 3.008e13,
                              2.895e13, 2.785e13, 2.680e13, 2.579e13, 2.482e13, 2.389e13,
                              2.300e13, 2.214e13, 2.132e13, 2.052e13, 1.976e13, 1.903e13,
                              1.832e13, 1.765e13, 1.700e13, 1.637e13, 1.577e13, 1.519e13,
                              1.463e13, 1.410e13, 1.358e13, 1.309e13, 1.261e13, 1.215e13,
                              1.171e13, 1.128e13, 1.088e13, 1.048e13, 1.010e13, 9.739e12,
                              9.388e12, 9.050e12, 8.725e12, 8.412e12, 8.110e12, 7.820e12,
                              7.540e12, 7.271e12, 7.011e12, 6.761e12, 6.521e12, 6.289e12,
                              6.065e12, 5.850e12, 5.643e12, 5.443e12, 5.251e12, 5.065e12,
                              4.886e12, 4.714e12, 4.548e12, 4.388e12, 4.234e12, 4.085e12,
                              3.942e12, 3.670e12, 3.418e12, 3.184e12, 2.966e12, 2.763e12,
                              2.574e12, 2.399e12, 2.236e12, 2.084e12, 1.942e12, 1.811e12,
                              1.688e12, 1.574e12, 1.468e12, 1.369e12, 1.277e12, 1.191e12,
                              1.111e12, 1.037e12, 9.674e11, 9.027e11, 8.424e11, 7.862e11,
                              7.338e11, 6.850e11, 6.394e11, 5.969e11, 5.573e11, 5.204e11,
                              4.859e11, 4.538e11, 4.238e11, 3.958e11, 3.697e11, 3.454e11,
                              3.226e11, 3.014e11, 2.816e11, 2.631e11, 2.459e11, 2.297e11,
                              2.147e11, 2.006e11, 1.875e11, 1.753e11, 1.638e11, 1.532e11,
                              1.432e11, 1.339e11, 1.252e11, 1.170e11, 1.094e11, 1.023e11,
                              9.568e10, 8.948e10, 8.369e10, 7.827e10, 7.321e10, 6.848e10,
                              6.406e10, 5.993e10, 5.606e10, 5.245e10, 4.907e10, 4.592e10,
                              4.297e10, 4.020e10, 3.762e10, 3.521e10, 3.295e10, 3.084e10,
                              2.887e10, 2.702e10, 2.529e10, 2.368e10, 2.216e10, 2.075e10,
                              1.943e10, 1.819e10, 1.703e10, 1.595e10, 1.493e10, 1.398e10,
                              1.309e10, 1.226e10, 1.148e10, 1.076e10, 1.007e10, 9.436e9,
                              8.839e9, 8.280e9, 7.757e9, 7.267e9, 6.808e9, 6.378e9, 5.976e9,
                              5.599e9, 5.247e9, 4.917e9, 4.607e9, 3.917e9, 3.331e9, 2.834e9,
                              2.411e9, 2.052e9, 1.747e9, 1.487e9, 1.267e9, 1.079e9, 9.196e8,
                              7.838e8, 6.682e8, 5.697e8, 4.859e8, 4.146e8, 3.537e8, 3.019e8,
                              2.578e8, 2.201e8, 1.880e8, 1.606e8, 1.372e8, 1.173e8, 1.003e8,
                              8.573e7, 7.332e7, 6.272e7, 5.367e7, 4.593e7, 3.932e7, 3.367e7,
                              2.883e7, 2.470e7, 2.116e7, 1.813e7, 1.554e7, 1.333e7, 1.143e7,
                              9.802e6, 8.410e6, 7.216e6, 6.194e6, 5.317e6, 4.566e6, 3.921e6,
                              3.368e6, 2.894e6, 2.487e6, 2.138e6, 1.838e6, 1.581e6, 1.360e6,
                              1.170e6, 1.007e6, 8.664e5, 7.458e5, 6.422e5, 5.531e5, 4.764e5,
                              4.105e5, 3.537e5, 3.049e5, 2.628e5, 2.267e5, 1.955e5, 1.686e5,
                              1.455e5, 1.256e5, 1.084e5, 9.358e4, 8.081e4, 6.979e4, 6.029e4,
                              5.210e4, 4.503e4, 3.892e4, 3.365e4, 2.910e4, 2.517e4, 2.177e4,
                              1.884e4, 1.631e4, 1.411e4, 1.222e4, 1.058e4, 9.165e3, 7.940e3,
                              6.880e3, 5.962e3, 5.168e3, 4.481e3, 3.886e3, 3.370e3, 2.924e3,
                              2.537e3, 2.201e3, 1.911e3, 1.659e3, 1.440e3, 1.251e3])

        self.__ar = np.array([1.351e18, 1.236e18, 1.130e18, 1.033e18, 9.437e17, 8.624e17,
                              7.880e17, 7.198e17, 6.574e17, 6.002e17, 5.478e17, 4.998e17,
                              4.557e17, 4.152e17, 3.781e17, 3.441e17, 3.129e17, 2.844e17,
                              2.583e17, 2.345e17, 2.127e17, 1.928e17, 1.746e17, 1.581e17,
                              1.430e17, 1.292e17, 1.167e17, 1.053e17, 9.501e16, 7.735e16,
                              6.279e16, 5.082e16, 4.101e16, 3.299e16, 2.645e16, 2.113e16,
                              1.681e16, 1.331e16, 1.046e16, 8.200e15, 6.481e15, 5.169e15,
                              4.163e15, 3.386e15, 2.779e15, 2.301e15, 1.920e15, 1.614e15,
                              1.366e15, 1.164e15, 9.979e14, 8.606e14, 7.460e14, 6.498e14,
                              5.685e14, 4.994e14, 4.403e14, 3.896e14, 3.458e14, 3.078e14,
                              2.748e14, 2.460e14, 2.207e14, 1.985e14, 1.789e14, 1.616e14,
                              1.463e14, 1.326e14, 1.205e14, 1.096e14, 9.989e13, 9.118e13,
                              8.335e13, 7.630e13, 6.994e13, 6.420e13, 5.900e13, 5.428e13,
                              5.000e13, 4.611e13, 4.256e13, 3.933e13, 3.638e13, 3.368e13,
                              3.121e13, 2.895e13, 2.687e13, 2.496e13, 2.321e13, 2.159e13,
                              2.011e13, 1.874e13, 1.747e13, 1.620e13, 1.522e13, 1.422e13,
                              1.329e13, 1.243e13, 1.163e13, 1.089e13, 1.020e13, 9.565e12,
                              8.970e12, 8.417e12, 7.901e12, 7.420e12, 6.971e12, 6.553e12,
                              6.162e12, 5.797e12, 5.456e12, 5.136e12, 4.838e12, 4.558e12,
                              4.296e12, 4.050e12, 3.820e12, 3.604e12, 3.401e12, 3.211e12,
                              3.033e12, 2.865e12, 2.707e12, 2.558e12, 2.419e12, 2.288e12,
                              2.164e12, 2.047e12, 1.938e12, 1.834e12, 1.737e12, 1.645e12,
                              1.558e12, 1.477e12, 1.399e12, 1.327e12, 1.258e12, 1.193e12,
                              1.131e12, 1.073e12, 1.019e12, 9.666e11, 9.176e11, 8.711e11,
                              8.272e11, 7.856e11, 7.463e11, 7.090e11, 6.737e11, 6.402e11,
                              6.085e11, 5.785e11, 5.500e11, 5.230e11, 4.974e11, 4.731e11,
                              4.501e11, 4.282e11, 4.075e11, 3.878e11, 3.691e11, 3.514e11,
                              3.345e11, 3.185e11, 3.033e11, 2.888e11, 2.751e11, 2.621e11,
                              2.497e11, 2.379e11, 2.267e11, 2.160e11, 2.059e11, 1.962e11,
                              1.871e11, 1.783e11, 1.700e11, 1.621e11, 1.546e11, 1.474e11,
                              1.406e11, 1.341e11, 1.280e11, 1.221e11, 1.165e11, 1.111e11,
                              1.060e11, 1.012e11, 9.658e10, 9.218e10, 8.799e10, 8.399e10,
                              8.019e10, 7.655e10, 7.309e10, 6.979e10, 6.665e10, 6.365e10,
                              6.078e10, 5.805e10, 5.545e10, 5.297e10, 5.060e10, 4.834e10,
                              4.618e10, 4.412e10, 4.216e10, 4.029e10, 3.850e10, 3.679e10,
                              3.516e10, 3.360e10, 3.212e10, 3.070e10, 2.935e10, 2.805e10,
                              2.682e10, 2.564e10, 2.451e10, 2.344e10, 2.241e10, 2.143e10,
                              2.049e10, 1.960e10, 1.874e10, 1.792e10, 1.714e10, 1.639e10,
                              1.568e10, 1.435e10, 1.313e10, 1.202e10, 1.100e10, 1.007e10,
                              9.223e9, 8.447e9, 7.737e9, 7.087e9, 6.493e9, 5.950e9, 5.452e9,
                              4.997e9, 4.580e9, 4.199e9, 3.850e9, 3.530e9, 3.237e9, 2.969e9,
                              2.723e9, 2.498e9, 2.292e9, 2.103e9, 1.929e9, 1.771e9, 1.625e9,
                              1.491e9, 1.369e9, 1.257e9, 1.154e9, 1.059e9, 9.728e8, 8.934e8,
                              8.205e8, 7.536e8, 6.922e8, 6.359e8, 5.842e8, 5.367e8, 4.932e8,
                              4.532e8, 4.165e8, 3.827e8, 3.518e8, 3.234e8, 2.972e8, 2.733e8,
                              2.512e8, 2.310e8, 2.124e8, 1.953e8, 1.796e8, 1.652e8, 1.519e8,
                              1.397e8, 1.285e8, 1.182e8, 1.088e8, 1.001e8, 9.207e7, 8.472e7,
                              7.796e7, 7.174e7, 6.602e7, 6.076e7, 5.593e7, 5.148e7, 4.739e7,
                              4.362e7, 4.016e7, 3.698e7, 3.404e7, 3.135e7, 2.887e7, 2.658e7,
                              2.448e7, 2.255e7, 2.077e7, 1.913e7, 1.762e7, 1.623e7, 1.495e7,
                              1.377e7, 1.269e7, 1.169e7, 1.077e7, 9.929e6, 9.149e6, 8.432e6,
                              7.771e6, 7.162e6, 6.602e6, 6.085e6, 5.609e6, 5.171e6, 4.767e6,
                              4.395e6, 4.052e6, 3.737e6, 3.445e6, 2.814e6, 2.299e6, 1.878e6,
                              1.535e6, 1.255e6, 1.027e6, 8.400e5, 6.875e5, 5.628e5, 4.609e5,
                              3.775e5, 3.093e5, 2.535e5, 2.079e5, 1.705e5, 1.398e5, 1.147e5,
                              9.419e4, 7.733e4, 6.351e4, 5.217e4, 4.287e4, 3.524e4, 2.898e4,
                              2.383e4, 1.961e4, 1.613e4, 1.328e4, 1.094e4, 9.006e3, 7.420e3,
                              6.114e3, 5.040e3, 4.155e3, 3.427e3, 2.827e3, 2.333e3, 1.926e3,
                              1.590e3, 1.313e3, 1.085e3, 8.964e2, 7.409e2, 6.126e2, 5.066e2,
                              4.191e2, 3.467e2, 2.870e2, 2.376e2, 1.967e2, 1.630e2, 1.350e2,
                              1.119e2, 9.276e1, 7.692e1, 6.380e1, 5.293e1, 4.392e1, 3.646e1,
                              3.027e1, 2.514e1, 2.088e1, 1.735e1, 1.442e1, 1.199e1, 9.970e0,
                              8.293e0, 6.900e0, 5.742e0, 4.780e0, 3.980e0, 3.314e0, 2.761e0,
                              2.301e0, 1.918e0, 1.599e0, 1.333e0, 1.112e0, 9.277e-1, 7.742e-1,
                              6.462e-1, 5.396e-1, 4.506e-1, 3.764e-1, 3.145e-1, 2.629e-1,
                              2.197e-1, 1.837e-1, 1.537e-1, 1.286e-1, 1.076e-1, 9.004e-2,
                              7.538e-2, 6.312e-2, 5.287e-2, 4.430e-2, 3.712e-2, 3.111e-2,
                              2.609e-2, 2.188e-2])

        self.__he = np.array([7.582e14, 6.976e14, 6.422e14, 5.915e14, 5.453e14, 5.031e14,
                              4.647e14, 4.296e14, 3.976e14, 3.685e14, 3.419e14, 3.177e14,
                              2.956e14, 2.753e14, 2.568e14, 2.399e14, 2.244e14, 2.103e14,
                              1.973e14, 1.854e14, 1.745e14, 1.645e14, 1.553e14, 1.468e14,
                              1.390e14, 1.317e14, 1.251e14, 1.190e14, 1.133e14, 1.034e14,
                              9.497e13, 8.776e13, 8.160e13, 7.633e13, 7.181e13, 6.789e13,
                              6.443e13, 6.128e13, 5.821e13, 5.526e13, 5.271e13, 5.044e13,
                              4.848e13, 4.648e13, 4.473e13, 4.310e13, 4.160e13, 4.019e13,
                              3.888e13, 3.766e13, 3.652e13, 3.547e13, 3.448e13, 3.356e13,
                              3.270e13, 3.189e13, 3.112e13, 3.040e13, 2.972e13, 2.907e13,
                              2.846e13, 2.787e13, 2.732e13, 2.679e13, 2.629e13, 2.581e13,
                              2.535e13, 2.491e13, 2.449e13, 2.408e13, 2.369e13, 2.332e13,
                              2.296e13, 2.261e13, 2.228e13, 2.196e13, 2.165e13, 2.135e13,
                              2.106e13, 2.078e13, 2.051e13, 2.024e13, 1.999e13, 1.974e13,
                              1.950e13, 1.927e13, 1.905e13, 1.883e13, 1.861e13, 1.841e13,
                              1.820e13, 1.801e13, 1.782e13, 1.763e13, 1.745e13, 1.727e13,
                              1.710e13, 1.693e13, 1.676e13, 1.660e13, 1.644e13, 1.629e13,
                              1.614e13, 1.599e13, 1.585e13, 1.571e13, 1.557e13, 1.543e13,
                              1.520e13, 1.517e13, 1.504e13, 1.492e13, 1.479e13, 1.467e13,
                              1.456e13, 1.444e13, 1.433e13, 1.421e13, 1.410e13, 1.400e13,
                              1.389e13, 1.379e13, 1.368e13, 1.358e13, 1.348e13, 1.339e13,
                              1.329e13, 1.319e13, 1.310e13, 1.301e13, 1.292e13, 1.283e13,
                              1.274e13, 1.266e13, 1.257e13, 1.249e13, 1.240e13, 1.232e13,
                              1.224e13, 1.216e13, 1.208e13, 1.201e13, 1.193e13, 1.185e13,
                              1.178e13, 1.171e13, 1.163e13, 1.156e13, 1.149e13, 1.142e13,
                              1.135e13, 1.128e13, 1.122e13, 1.115e13, 1.108e13, 1.102e13,
                              1.095e13, 1.089e13, 1.083e13, 1.076e13, 1.070e13, 1.064e13,
                              1.058e13, 1.052e13, 1.046e13, 1.040e13, 1.034e13, 1.029e13,
                              1.023e13, 1.023e13, 1.012e13, 1.006e13, 1.001e13, 9.953e12,
                              9.899e12, 9.846e12, 9.794e12, 9.741e12, 9.690e12, 9.638e12,
                              9.587e12, 9.537e12, 9.487e12, 9.438e12, 9.389e12, 9.340e12,
                              9.292e12, 9.244e12, 9.196e12, 9.149e12, 9.103e12, 9.056e12,
                              9.010e12, 8.965e12, 8.920e12, 8.875e12, 8.830e12, 8.786e12,
                              8.743e12, 8.699e12, 8.656e12, 8.613e12, 8.571e12, 8.529e12,
                              8.487e12, 8.445e12, 8.404e12, 8.363e12, 8.322e12, 8.282e12,
                              8.242e12, 8.202e12, 8.163e12, 8.124e12, 8.085e12, 8.046e12,
                              8.008e12, 7.969e12, 7.931e12, 7.894e12, 7.856e12, 7.819e12,
                              7.782e12, 7.746e12, 7.709e12, 7.673e12, 7.637e12, 7.602e12,
                              7.566e12, 7.496e12, 7.427e12, 7.358e12, 7.290e12, 7.224e12,
                              7.157e12, 7.092e12, 7.028e12, 6.964e12, 6.901e12, 6.839e12,
                              6.777e12, 6.717e12, 6.657e12, 6.597e12, 6.538e12, 6.480e12,
                              6.423e12, 6.366e12, 6.310e12, 6.254e12, 6.199e12, 6.145e12,
                              6.091e12, 6.038e12, 5.985e12, 5.933e12, 5.881e12, 5.830e12,
                              5.779e12, 5.729e12, 5.680e12, 5.631e12, 5.582e12, 5.534e12,
                              5.487e12, 5.439e12, 5.393e12, 5.347e12, 5.301e12, 5.256e12,
                              5.211e12, 5.167e12, 5.123e12, 5.079e12, 5.036e12, 4.993e12,
                              4.951e12, 4.909e12, 4.868e12, 4.827e12, 4.786e12, 4.746e12,
                              4.706e12, 4.666e12, 4.627e12, 4.588e12, 4.550e12, 4.512e12,
                              4.474e12, 4.437e12, 4.399e12, 4.363e12, 4.326e12, 4.290e12,
                              4.255e12, 4.219e12, 4.184e12, 4.150e12, 4.115e12, 4.081e12,
                              4.047e12, 4.014e12, 3.981e12, 3.948e12, 3.915e12, 3.883e12,
                              3.851e12, 3.819e12, 3.788e12, 3.757e12, 3.726e12, 3.695e12,
                              3.665e12, 3.635e12, 3.605e12, 3.576e12, 3.547e12, 3.518e12,
                              3.489e12, 3.461e12, 3.432e12, 3.404e12, 3.377e12, 3.349e12,
                              3.322e12, 3.295e12, 3.268e12, 3.242e12, 3.215e12, 3.151e12,
                              3.087e12, 3.026e12, 2.965e12, 2.906e12, 2.848e12, 2.791e12,
                              2.735e12, 2.681e12, 2.628e12, 2.567e12, 2.525e12, 2.475e12,
                              2.426e12, 2.379e12, 2.332e12, 2.286e12, 2.241e12, 2.197e12,
                              2.154e12, 2.112e12, 2.071e12, 2.031e12, 1.991e12, 1.953e12,
                              1.915e12, 1.878e12, 1.842e12, 1.806e12, 1.771e12, 1.737e12,
                              1.704e12, 1.671e12, 1.639e12, 1.608e12, 1.577e12, 1.547e12,
                              1.518e12, 1.489e12, 1.461e12, 1.433e12, 1.406e12, 1.379e12,
                              1.353e12, 1.328e12, 1.303e12, 1.278e12, 1.254e12, 1.231e12,
                              1.208e12, 1.185e12, 1.163e12, 1.141e12, 1.120e12, 1.099e12,
                              1.079e12, 1.059e12, 1.039e12, 1.020e12, 1.001e12, 9.826e11,
                              9.645e11, 9.468e11, 9.294e11, 9.124e11, 8.957e11, 8.793e11,
                              8.632e11, 8.475e11, 8.320e11, 8.169e11, 8.021e11, 7.875e11,
                              7.733e11, 7.593e11, 7.456e11, 7.321e11, 7.189e11, 7.060e11,
                              6.933e11, 6.809e11, 6.687e11, 6.567e11, 6.450e11, 6.335e11,
                              6.222e11, 6.111e11, 6.003e11, 5.896e11, 5.792e11, 5.689e11,
                              5.589e11, 5.490e11, 5.393e11, 5.298e11, 5.205e11, 5.114e11,
                              5.024e11, 4.936e11, 4.850e11])

        self.__h = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.767e11, 3.659e11, 3.557e11,
                             3.461e11, 3.369e11, 3.283e11, 3.201e11, 3.123e11, 3.049e11, 2.978e11,
                             2.911e11, 2.847e11, 2.786e11, 2.728e11, 2.672e11, 2.619e11, 2.568e11,
                             2.520e11, 2.473e11, 2.429e11, 2.386e11, 2.345e11, 2.306e11, 2.268e11,
                             2.232e11, 2.197e11, 2.163e11, 2.131e11, 2.100e11, 2.070e11, 2.041e11,
                             2.013e11, 1.987e11, 1.961e11, 1.936e11, 1.911e11, 1.888e11, 1.866e11,
                             1.844e11, 1.823e11, 1.802e11, 1.782e11, 1.763e11, 1.745e11, 1.727e11,
                             1.709e11, 1.692e11, 1.676e11, 1.660e11, 1.645e11, 1.630e11, 1.615e11,
                             1.601e11, 1.587e11, 1.574e11, 1.561e11, 1.548e11, 1.536e11, 1.524e11,
                             1.512e11, 1.501e11, 1.490e11, 1.479e11, 1.468e11, 1.458e11, 1.448e11,
                             1.439e11, 1.429e11, 1.420e11, 1.411e11, 1.402e11, 1.393e11, 1.385e11,
                             1.377e11, 1.369e11, 1.361e11, 1.353e11, 1.345e11, 1.338e11, 1.331e11,
                             1.324e11, 1.317e11, 1.310e11, 1.304e11, 1.297e11, 1.291e11, 1.285e11,
                             1.279e11, 1.273e11, 1.267e11, 1.261e11, 1.256e11, 1.250e11, 1.245e11,
                             1.240e11, 1.234e11, 1.229e11, 1.224e11, 1.219e11, 1.215e11, 1.210e11,
                             1.205e11, 1.201e11, 1.196e11, 1.192e11, 1.188e11, 1.183e11, 1.179e11,
                             1.175e11, 1.171e11, 1.167e11, 1.163e11, 1.159e11, 1.156e11, 1.152e11,
                             1.148e11, 1.145e11, 1.141e11, 1.138e11, 1.134e11, 1.131e11, 1.127e11,
                             1.124e11, 1.121e11, 1.131e11, 1.115e11, 1.112e11, 1.109e11, 1.106e11,
                             1.103e11, 1.100e11, 1.097e11, 1.094e11, 1.091e11, 1.088e11, 1.086e11,
                             1.083e11, 1.080e11, 1.078e11, 1.075e11, 1.073e11, 1.070e11, 1.067e11,
                             1.065e11, 1.063e11, 1.060e11, 1.058e11, 1.055e11, 1.053e11, 1.051e11,
                             1.049e11, 1.044e11, 1.040e11, 1.035e11, 1.031e11, 1.027e11, 1.023e11,
                             1.019e11, 1.015e11, 1.012e11, 1.008e11, 1.004e11, 1.001e11, 9.971e10,
                             9.937e10, 9.903e10, 9.868e10, 9.836e10, 9.804e10, 9.772e10, 9.741e10,
                             9.710e10, 9.680e10, 9.650e10, 9.620e10, 9.591e10, 9.562e10, 9.534e10,
                             9.505e10, 9.478e10, 9.450e10, 9.423e10, 9.397e10, 9.370e10, 9.344e10,
                             9.318e10, 9.293e10, 9.268e10, 9.243e10, 9.218e10, 9.193e10, 9.169e10,
                             9.145e10, 9.121e10, 9.098e10, 9.074e10, 9.051e10, 9.028e10, 9.005e10,
                             8.983e10, 8.960e10, 8.938e10, 8.916e10, 8.894e10, 8.872e10, 8.851e10,
                             8.829e10, 8.808e10, 8.787e10, 8.766e10, 8.745e10, 8.725e10, 8.704e10,
                             8.684e10, 8.663e10, 8.643e10, 8.623e10, 8.603e10, 8.583e10, 8.564e10,
                             8.544e10, 8.525e10, 8.505e10, 8.486e10, 8.467e10, 8.448e10, 8.429e10,
                             8.410e10, 8.391e10, 8.373e10, 8.354e10, 8.336e10, 8.317e10, 8.299e10,
                             8.281e10, 8.263e10, 8.245e10, 8.227e10, 8.209e10, 8.191e10, 8.173e10,
                             8.155e10, 8.138e10, 8.120e10, 8.103e10, 8.085e10, 8.068e10, 8.051e10,
                             8.034e10, 8.017e10, 8.000e10, 7.959e10, 7.918e10, 7.878e10, 7.838e10,
                             7.798e10, 7.758e10, 7.719e10, 7.680e10, 7.641e10, 7.602e10, 7.564e10,
                             7.526e10, 7.488e10, 7.451e10, 7.413e10, 7.376e10, 7.339e10, 7.303e10,
                             7.267e10, 7.231e10, 7.195e10, 7.159e10, 7.124e10, 7.089e10, 7.054e10,
                             7.019e10, 6.985e10, 6.950e10, 6.916e10, 6.883e10, 6.849e10, 6.816e10,
                             6.782e10, 6.749e10, 6.717e10, 6.684e10, 6.652e10, 6.620e10, 6.588e10,
                             6.556e10, 6.524e10, 6.493e10, 6.462e10, 6.431e10, 6.400e10, 6.370e10,
                             6.339e10, 6.309e10, 6.279e10, 6.249e10, 6.220e10, 6.190e10, 6.161e10,
                             6.132e10, 6.103e10, 6.074e10, 6.046e10, 6.017e10, 5.989e10, 5.961e10,
                             5.933e10, 5.905e10, 5.878e10, 5.851e10, 5.823e10, 5.796e10, 5.769e10,
                             5.743e10, 5.716e10, 5.690e10, 5.664e10, 5.637e10, 5.612e10, 5.586e10,
                             5.560e10, 5.535e10, 5.509e10, 5.484e10, 5.459e10, 5.434e10, 5.410e10,
                             5.385e10, 5.361e10, 5.336e10, 5.312e10, 5.288e10, 5.264e10, 5.241e10,
                             5.217e10, 5.194e10, 5.170e10, 5.147e10, 5.124e10, 5.101e10, 5.078e10,
                             5.056e10, 5.033e10, 5.011e10, 4.989e10, 4.967e10])
# =============================================================================================
# Define PUBLIC member functions
# ---------------------------------------------------------------------------------------------

    def gravity(self, height_asl):
        """

        :param height_asl: float
                           The height above ground level in units of *meters*. This variable \
                           can be a scalar, list, or array value.
        :return altitude gravity: float
                                  The acceleration due to gravity at a user defined \
                                  ``Height_ASL``.

        This public member-function calculates the acceleration due to gravity :math:`g` \
        as a function of sea level acceleration due to gravity (:math:`g_o`), the average \
        Earth radius (:math:`r_o`) and the heigh above ground level (:math:`Z`). \
        The equation relating these variables is derived from page 8 of [1]_

        .. math::

            g = g_o\\left(\\frac{r_o}{r_o+Z}\\right)

        """
        if isinstance(height_asl, list):
            height_asl = StandardAtmosphere.__list_to_array(height_asl)
        StandardAtmosphere.__test_for_strings(height_asl)
        StandardAtmosphere.__verify_range(height_asl)
        altitude_gravity = self.__sea_level_gravity * (self.__earth_radius /
                                                       (self.__earth_radius + height_asl)) ** 2.0
        return altitude_gravity
# ---------------------------------------------------------------------------------------------

    def geopotential_altitude(self, height_asl):
        """

        :param height_asl: float
                           The height above ground level in units of *meters*.  This variable \
                           can be a scalar, list, or array value.
        :return geop_altitude: float
                               The geopotential altitude in units of *meters*.  This variable \
                               can be a scalar or array value

        This public member-function calculates the geopotential altitude (:math:`h_A`) as a function of altitude above \
        ground level as a function of the average Earth radius (:math:`r_o`) and the height above \
        ground level (:math:`Z`).  This equation is derived from page 8 of [1]_ and page 93 of [2]_.

        .. math::

            h_A = Z\\left(\\frac{r_o}{r_o+Z}\\right)

        .. [2] J.D. Anderson, "Introduction to Flight, 4th Ed.," McGraw-Hill Inc., 2000, pg. 93
        """
        if isinstance(height_asl, list):
            height_asl = StandardAtmosphere.__list_to_array(height_asl)
        StandardAtmosphere.__test_for_strings(height_asl)
        StandardAtmosphere.__verify_range(height_asl)
        geop_altitude = (self.__earth_radius * height_asl) / (self.__earth_radius + height_asl)
        return geop_altitude
# ---------------------------------------------------------------------------------------------

    def temperature(self, height_asl):
        """

        :param height_asl: float
                           The height above ground level in units of *meters*.  This variable \
                           can be a scalar, list or array value.
        :return altitude_temperature: float
                                      The temperature at a user defined altitude in units \
                                      of *Kelvins*.  This variable can be a scalar or list \
                                      value

        This function calculates the Temperature at a user defined geometric altitude using the \
        relationship established on page 3,4, and 10-11 of [1]_ as shown below where :math:`T_m` \
        represents the molecular temperature, :math:`T_{m,b}` represents the molecular temperature \
        at the start of a temperature zone, :math:`L_{m,b}` represents the temperature gradient in \
        a temperature zone, :math:`h` is the geopotential altitude and :math:`h_A` is the geopotential \
        altitude at the start of the zone.

        .. math::

            T_m = T_{m,b} + L_{m,b}\\left(h-h_A\\right)

        The above equation is valide over 8 temperature zone ranging from -1.524 km to 91 km geopotential, with \
        the coefficients shown in the table below.

        == =================== ===================== ================
        b  :math:`T_{m,b}` (K) :math:`L_{m,b}` (K/m) :math:`h_A` (m)
        == =================== ===================== ================
        1  288.15              -0.0065               0.0
        2  216.65               0.0                  11,000
        3  216.65               0.001                32,000
        4  228.65               0.0028               47,000
        5  270.65               0.0                  51,000
        6  270.65              -0.0028               71,000
        7  214.65              -0.002                84,852
        8  186.946              0.0                  91,000
        == =================== ===================== ================

        Above 91 km the molecular density becomes so low that temperature is purely kinetic.  \
        From 91 km to 120 km the temperature is determined from the below equation where \
        :math:`T_c = 263.1905` K, :math:`A = -76.3232` K, and :math:`a = -19942.9` m.  At this \
        point the calculations are no longer carried out in geopotential altitudes, but instead in \
        geometrix altitude :math:`Z`.

        .. math::

            T = T_c + A\\left[1-\\left(\\frac{Z-Z_8}{a}\\right)^2\\right]^{1/2}

        Finally from 120 km to 10,000 km the following equation is used where \
        :math:`T_{\infty}=1000` K, and :math:`T_{10}=360` K.

        .. math::

            T=T_{\infty} - \\left(T_{\infty}-T_{10}\\right)e^{-\lambda \epsilon}

        .. math::

            \lambda = \\frac{L_9}{\\left(T_{\infty}-T_{10}\\right)}

        .. math::

            \epsilon = \\left(Z-Z_{10}\\right)\\frac{r_o+Z_{10}}{r_o+Z}
        """

        if np.isscalar(height_asl):
            altitude_temperature = self.__temperature_iterator(height_asl)
        else:
            altitude_temperature = np.array([self.__temperature_iterator(height_asl[i])
                                            for i in range(len(height_asl))], dtype=np.float32)
        return altitude_temperature
# ---------------------------------------------------------------------------------------------

    def pressure(self, height_asl):
        """

        :param height_asl: float
                           The height above ground level in units of *meters*.  This variable \
                           can be a scalar, list or array value.
        :return altitude_pressure: float
                                   The pressure at a user defined altitude in units of \
                                   *Pascals*.  This variable can be a scalar or array value

        This function calculates the Pressure at a user defined geometric altitude using the \
        relationships established on page 12 of [1]_.  If the calculation is carried out for an \
        gradient zone then pressure is calculated using the following equation where \
        :math:`M_o = 28.9644` kg/kmol and :math:`R^* = 8,314.32` N-m/kmol-K.

        .. math::

            P = P_b\\left(\\frac{T_{m,b}}{T}\\right)^{\\frac{g_oM_o}{R^*L_{m,b}}}

        if the calculation is carried out in an isothermal zone the methodology is

        .. math::

            P = P_bexp\\left[\\frac{-g_oM_o\\left(h-h_A\\right)}{R^*T_{m,b}}\\right]

        The above methodology is valid over the range of -1.524 km to 86 km with the following \
        coefficients

        == ==================== ===================== ================
        b  :math:`P_{m,b}` (Pa) :math:`L_{m,b}` (K/m) :math:h` (m)
        == ==================== ===================== ================
        1  101325.0             -0.0065               0.0
        2  22699.064             0.0                  11,000
        3  5545.9                0.001                32,000
        4  879.277               0.0028               47,000
        5  112.345               0.0                  51,000
        6  76.362               -0.0028               71,000
        7  5.109                -0.002                86,000
        == ==================== ===================== ================
        """
        if np.isscalar(height_asl):
            altitude_pressure = self.__pressure_iterator(height_asl)
        else:
            altitude_pressure = np.array([self.__pressure_iterator(height_asl[i])
                                         for i in range(len(height_asl))], dtype=np.float32)
        return altitude_pressure
# ---------------------------------------------------------------------------------------------

    def molar_mass(self, height_asl):
        """

        :param height_asl: float
                           The height above ground level in units of *meters*. This variable \
                           can be a scalar, list or array value
        :return mo: float
                    The molar mass at a user defined altitude in units of *kg/mol* \
                    This variable can be a scalar or array value
        """
        StandardAtmosphere.__verify_range(height_asl)
        if np.isscalar(height_asl):
            mo = self.__molar_mass_iterator(height_asl)
        else:
            mo = np.array([self.__molar_mass_iterator(height_asl[i])
                           for i in range(len(height_asl))], dtype=np.float)
        return mo
# ---------------------------------------------------------------------------------------------

    def diatomic_nitrogen(self, height_asl):
        """

        :param height_asl: float
                           The height above ground level in units of *meters*. This variable \
                           can be a scalar, list or array value
        :return concentration: float
                               The atmospheric concentration of nitrogen in units of 1/m3. \
                               This variable can be a scalar or array value.

        Above an altitude of 86 km, this function interpolates the nitrogen concentration \
         from tables.  Below 86 km the following equation is solved where :math:`f=0.78084` \
         and :math:`\\alpha` is the concentration, :math:`N_A` is avagadros constant, :math:`P` \
         is pressure and :math:`T` is temperature

         .. math::

             \\alpha = f\\left[\\frac{PN_A}{R^*T}\\right]
        """
        if isinstance(height_asl, list):
            height_asl = StandardAtmosphere.__list_to_array(height_asl)
        StandardAtmosphere.__test_for_strings(height_asl)
        StandardAtmosphere.__verify_range(height_asl)
        if np.size(height_asl) > 1:
            concentration = np.array([self.__n2concentration(height_asl[i]) for i
                                      in range(len(height_asl))], np.dtype(np.float32))
        else:
            concentration = self.__n2concentration(height_asl)
        return concentration
# ---------------------------------------------------------------------------------------------

    def monoatomic_oxygen(self, height_asl):
        """

        :param height_asl: float
                           The height above ground level in units of *meters*. This variable \
                           can be a scalar, list or array value
        :return concentration: float
                               The atmospheric concentration of atomic oxygen in units of \
                               1/m3. Variable can be a scalar, or array

        bove an altitude of 86 km, this function interpolates the oxygen concentration \
         from tables.  Below 86 km the atomic oxygen content is assumed to be 0.

         .. math::

             \\alpha = f\\left[\\frac{PN_A}{R^*T}\\right]
        """
        if isinstance(height_asl, list):
            height_asl = StandardAtmosphere.__list_to_array(height_asl)
        StandardAtmosphere.__test_for_strings(height_asl)
        StandardAtmosphere.__verify_range(height_asl)
        if np.size(height_asl) > 1:
            concentration = np.array([self.__oconcentration(height_asl[i]) for i
                                      in range(len(height_asl))], np.dtype(np.float32))
        else:
            concentration = self.__oconcentration(height_asl)
        return concentration
# ---------------------------------------------------------------------------------------------

    def diatomic_oxygen(self, height_asl):
        """

        :param height_asl: float
                           The height above ground level in units of *meters*. This variable \
                           can be a scalar, list or array value
        :return concentration: float
                               The atmospheric concentration of diatomic oxygen in units of \
                               1/m3.  Variable can be a scalar or an array.

        Above an altitude of 86 km, this function interpolates the oxygen concentration \
        from tables.  Below 86 km the following equation is solved where :math:`f=0.209476` \
        and :math:`\\alpha` is the concentration, :math:`N_A` is avagadros constant, :math:`P` \
        is pressure and :math:`T` is temperature

        .. math::

            \\alpha = f\\left[\\frac{PN_A}{R^*T}\\right]
        """
        if isinstance(height_asl, list):
            height_asl = StandardAtmosphere.__list_to_array(height_asl)
        StandardAtmosphere.__test_for_strings(height_asl)
        StandardAtmosphere.__verify_range(height_asl)
        if np.size(height_asl) > 1:
            concentration = np.array([self.__o2concentration(height_asl[i]) for i
                                      in range(len(height_asl))], np.dtype(np.float32))
        else:
            concentration = self.__o2concentration(height_asl)
        return concentration
# ---------------------------------------------------------------------------------------------

    def argon(self, height_asl):
        """

        :param height_asl: float
                           The height above ground level in units of *meters*. This variable \
                           can be a scalar, list or array value
        :return concentration: float
                               The atmospheric concentration of argon in units of 1/m3. \
                               Variable can be a scalar or an array value
        """
        # Initialize variable
        if isinstance(height_asl, list):
            height_asl = StandardAtmosphere.__list_to_array(height_asl)
        StandardAtmosphere.__test_for_strings(height_asl)
        StandardAtmosphere.__verify_range(height_asl)
        if np.size(height_asl) > 1:
            concentration = np.array([self.__arconcentration(height_asl[i]) for i
                                      in range(len(height_asl))], np.dtype(np.float32))
        else:
            concentration = self.__arconcentration(height_asl)
        return concentration
# ---------------------------------------------------------------------------------------------

    def helium(self, height_asl):
        """

        :param height_asl: float
                           The height above ground level in units of *meters*. This variable \
                           can be a scalar, list or array value
        :return concentration: float
                               The atmospheric concentration of helium in units of 1/m3. \
                               Variable can be a scalar or an array value.
        """
        if isinstance(height_asl, list):
            height_asl = StandardAtmosphere.__list_to_array(height_asl)
        StandardAtmosphere.__test_for_strings(height_asl)
        StandardAtmosphere.__verify_range(height_asl)
        if np.size(height_asl) > 1:
            concentration = np.array([self.__heconcentration(height_asl[i]) for i
                                      in range(len(height_asl))], np.dtype(np.float32))
        else:
            concentration = self.__heconcentration(height_asl)
        return concentration
# ---------------------------------------------------------------------------------------------

    def hydrogen(self, height_asl):
        """

        :param height_asl: float
                           The height above ground level in units of *meters*. This variable \
                           can be a scalar, list or array value
        :return concentration: float
                               The atmospheric concentration of nitrogen in units of 1/m3. \
                               Variable can be a scalar or an array value.
        """
        if isinstance(height_asl, list):
            height_asl = StandardAtmosphere.__list_to_array(height_asl)
        StandardAtmosphere.__test_for_strings(height_asl)
        StandardAtmosphere.__verify_range(height_asl)
        if np.size(height_asl) > 1:
            concentration = np.array([self.__hconcentration(height_asl[i]) for i
                                      in range(len(height_asl))], np.dtype(np.float32))
        else:
            concentration = self.__hconcentration(height_asl)
        return concentration
# ---------------------------------------------------------------------------------------------

    def density(self, height_asl):
        """

        :param height_asl: float
                           The height above ground level in units of *meters*. This variable \
                           can be a scalar, list or array value
        :return density: float
                         The mass density of Earth's atmosphere in units of kg/m3.  Variable \
                         can be a scalar or array value.

        This function solves the following equation where :math:`M` represents the molar \
        mass in units of kg/kmol, :math:`P` represents pressure in units of Pascals, \
        :math:`T` represents temperature in units of Kelvins and :math:`R^*` represents the \
        gas constant for Earth's atmosphere in units of N-m/(kmol-K).

        .. math::

            \\rho=\\frac{PM}{R^*T}
        """
        temp = self.temperature(height_asl)
        pres = self.pressure(height_asl)
        mo = self.molar_mass(height_asl)
        return (pres * mo)/(self.__RStar * temp)
# ---------------------------------------------------------------------------------------------

    def speed_of_sound(self, height_asl):
        """

        :param height_asl: float
                           The height above ground level in units of *meters*. This variable \
                           can be a scalar, list or array value
        :return a: float
                   The speed of sound in units of meters per second.  This variable \
                   can be a scalar or an array.

        The function solves the following equation where :math:`\gamma` is the ratio of \
        specific heats and is assumed to be 1.4 for Earth's atmosphere, :math:`M_o` is the \
        molar mass of the atmosphere at altitude and :math:`T_o` is the atmospheric temperautre\
        at altitude.

        .. math::

            a=\\left(\\frac{\\gamma R^*T_o}{M_o}\\right))^{1/2}

        This equation is derived from page 18 of [1]_.
        """
        mo = self.molar_mass(height_asl)
        to = self.temperature(height_asl)
        return ((1.4 * self.__RStar * to)/mo)**0.5
# ---------------------------------------------------------------------------------------------

    def dynamic_viscosity(self, height_asl):
        """

        :param height_asl: float
                           The height above ground level in units of *meters*. This variable \
                           can be a scalar, list or array value
        :return mu: float
                    The dynamic viscosity of Earth's atmopshere in units of N-s/m2.  \
                    Can be a scalar or an array

        The function solves the following equation where :math:`\\beta` is a constant\
        equal to :math:`1.458\\times10^{-6}` :math:`s\cdot m\cdot K^{1/2}` and :math:`S`\
        is Sutherland's constant of 110.4 K.

        .. math::

            \\mu=\\frac{\\beta T^{3/2}}{T+S}

        This equation is derived from page 19 of [1]_.
        """
        temp = self.temperature(height_asl)
        return (1.458e-6 * temp**(3.0/2.0))/(temp + 110.4)
# ---------------------------------------------------------------------------------------------

    def kinematic_viscosity(self, height_asl):
        """

        :param height_asl: float
                           The height above ground level in units of *meters*. This variable \
                           can be a scalar, list or array value
        :return nu: float
                    The kinematic viscosity of Earth's atmopshere in units of m2/s.  This \
                    can be a scalar or array variable

        The function solves the following equation where :math:`T`

        This equation is derived from page 19 of [1]_.
        """
        mu = self.dynamic_viscosity(height_asl)
        density = self.density(height_asl)
        return mu/density
# ---------------------------------------------------------------------------------------------

    def thermal_conductivity(self, height_asl):
        """

        :param height_asl: float
                           The height above ground level in units of *meters*. This variable \
                           can be a scalar, list or array value
        :return k: float
                   Thermal conductivity of the atmosphere in units of W/m-K.  Can be a \
                   scalar or an array

        The thermal conductivity (:math:`k`) is derived from the equation shown below \
        extracted from page 19 of [1]_.

        .. math::

            k = \\frac{2.64638\\times 10^{-3}T^{3/2}}{T+245.4\\times 10^{-12/T}}
        """
        temp = self.temperature(height_asl)
        k = (2.64638e-3 * temp**(3.0/2.0)) / (temp + 245.4 * 10**(-12.0/temp))
        return k
# =============================================================================================
# =============================================================================================
# =====================                                                 =======================
# =====================               PRIVATE-LIKE FUNCTIONS            =======================
# =====================                                                 =======================
# =============================================================================================
# =============================================================================================

    def __temperature_iterator(self, height_asl):
        """

        :param height_asl: float
                           The height above ground level in units of *meters*.
        :return altitude_temperature: float
                                      The temperature at a user defined altitude in units \
                                      of *Kelvins*.
        """
        # Initialize variable
        altitude_temperature = 0.0
        if height_asl > 1000000.0 or height_asl < -5000.0:
            sys.exit("FATAL ERROR: 1976 Standard Atmosphere Model only extends from -5 km to 1000 km")
        geo_alt = self.geopotential_altitude(height_asl)

        if height_asl < 89715.67:
            for index in range(len(self.__gradient)):
                height = self.__geoP_height_threshold[index + 1]
                if geo_alt < height:
                    altitude_temperature = self.__to[index] + self.__gradient[index] * \
                                           (geo_alt - self.__geoP_height_threshold[index])
                    break
        elif geo_alt < 110000.0:
            altitude_temperature = 263.1905 - 76.3232 * (1 - ((height_asl - 91000.0) /
                                                              -19942.9) ** 2) ** 0.5
        elif geo_alt < 120000.0:
            altitude_temperature = 240.000 + 0.012 * (height_asl - 110000.0)
        else:
            zeta = (height_asl - 120000.0) * (self.__earth_radius + 120000.0) / (self.__earth_radius + height_asl)
            lambda2 = 0.012 / (1000.0 - 360.0)
            altitude_temperature = 1000.0 - (1000.0 - 360.0) * np.exp(-lambda2 * zeta)
        if altitude_temperature == 0.0:
            sys.exit('FATAL ERROR: Conditions not met to calculate Temperature!')
        return altitude_temperature
# ---------------------------------------------------------------------------------------------

    def __pressure_iterator(self, height_asl):
        """

        :param height_asl: float
                           The height above ground level in units of *meters*.
        :return altitude_pressure: float
                                   The pressure at a user defined altitude in units \
                                   of *Pascals*.
        """
        # Initialize variable
        altitude_pressure = 0.0
        if height_asl > 1000000.0 or height_asl < -5000.0:
            sys.exit("FATAL ERROR: 1976 Standard Atmosphere Model only extends from -5 km to 1000 km")
        geo_alt = self.geopotential_altitude(height_asl)
        temperature_altitude = self.temperature(height_asl)
        if height_asl <= 86000.0:
            for index in range(len(self.__po)):
                height = self.__geoP_height_threshold[index + 1]
                if geo_alt <= height and self.__gradient[index] != 0:
                    altitude_pressure = self.__po[index] * (self.__to[index] / temperature_altitude) ** \
                                        ((self.__sea_level_gravity * self.molar_mass(height_asl)) /
                                            (self.__RStar * self.__gradient[index]))
                    break
                elif geo_alt <= height and self.__gradient[index] == 0:
                    altitude_pressure = self.__po[index] * \
                                        np.exp(((-self.__sea_level_gravity * self.molar_mass(height_asl) *
                                                (geo_alt - self.__geoP_height_threshold[index])) /
                                                (self.__RStar * self.__to[index])))
                    break
        else:
            n2 = self.diatomic_nitrogen(height_asl)
            o = self.monoatomic_oxygen(height_asl)
            o2 = self.diatomic_oxygen(height_asl)
            ar = self.argon(height_asl)
            he = self.helium(height_asl)
            h = self.hydrogen(height_asl)
            total_density = n2 + o + o2 + ar + he + h
            altitude_pressure = (total_density * self.__RStar * temperature_altitude) / \
                self.__Avagadros_Number
        if altitude_pressure == 0.0:
            sys.exit("FATAL ERROR: Conditions not met to calculate pressure!")
        return altitude_pressure
# ---------------------------------------------------------------------------------------------

    def __molar_mass_iterator(self, height_asl):
        """

        :param height_asl: float
                           The height above ground level in units of *meters*.
        :return mo: float
                    The molar mass of Earth's atmosphere at a user defined altitude.  \
                    Returned in units of kg/kmol
        """
        if height_asl > 1000000.0 or height_asl < -5000.0:
            sys.exit("FATAL ERROR: 1976 Standard Atmosphere Model only extends from -5 km to 1000 km")
        geo_alt = self.geopotential_altitude(height_asl)
        altitude = np.array([79000.0, 79500.0, 80000.0, 80500.0, 81000.0, 81500.0, 82000.0, 82500.0,
                             83000.0, 83500.0, 84000.0, 84852.05])
        ratio = np.array([1.000000, 0.999996, 0.999988, 0.999969, 0.999938, 0.999904, 0.999864,
                          0.999822, 0.999778, 0.999731, 0.999681, 0.999679])
        f = interp1d(altitude, ratio)

        if geo_alt <= 79000.0:
            mo = 28.9644
        elif geo_alt < 84852.05:
            mo = 28.9644 * f(geo_alt)
        else:
            n2 = self.diatomic_nitrogen(height_asl)
            o = self.monoatomic_oxygen(height_asl)
            o2 = self.diatomic_oxygen(height_asl)
            ar = self.argon(height_asl)
            he = self.helium(height_asl)
            h = self.hydrogen(height_asl)
            total = n2 + o + o2 + ar + he + h
            n2 /= total
            o /= total
            o2 /= total
            ar /= total
            he /= total
            h /= total
            mo = ((n2 * 28.0134) + (o * 31.9988 / 2.0) + (o2 * 31.9988) + (ar * 39.948) +
                  (he * 4.0026) + (h * 2.01594 / 2.0))
        return mo
# ---------------------------------------------------------------------------------------------

    def __n2concentration(self, height_asl):
        if height_asl < 86000.0:
            press = self.pressure(height_asl)
            temp = self.temperature(height_asl)
            concentration = 0.78084 * ((press * self.__Avagadros_Number) /
                                       (self.__RStar * temp))
        else:
            concentration = StandardAtmosphere.__interpolate(self.__altitude, self.__n2, height_asl)
        return concentration
# ---------------------------------------------------------------------------------------------

    def __oconcentration(self, height_asl):
        if height_asl < 86000.0:
            concentration = 0.0
        else:
            concentration = StandardAtmosphere.__interpolate(self.__altitude, self.__o, height_asl)
        return concentration
# ---------------------------------------------------------------------------------------------

    def __o2concentration(self, height_asl):
        if height_asl < 86000.0:
            press = self.pressure(height_asl)
            temp = self.temperature(height_asl)
            concentration = 0.209476 * ((press * self.__Avagadros_Number) / (self.__RStar * temp))
        else:
            concentration = StandardAtmosphere.__interpolate(self.__altitude, self.__o2, height_asl)
        return concentration
# ---------------------------------------------------------------------------------------------

    def __arconcentration(self, height_asl):
        if height_asl < 86000.0:
            press = self.pressure(height_asl)
            temp = self.temperature(height_asl)
            concentration = 0.00934 * ((press * self.__Avagadros_Number) / (self.__RStar * temp))
        else:
            concentration = StandardAtmosphere.__interpolate(self.__altitude, self.__ar, height_asl)
        return concentration
# ---------------------------------------------------------------------------------------------

    def __heconcentration(self, height_asl):
        if height_asl < 86000.0:
            press = self.pressure(height_asl)
            temp = self.temperature(height_asl)
            concentration = 0.00000524 * ((press * self.__Avagadros_Number) / (self.__RStar * temp))
        else:
            concentration = StandardAtmosphere.__interpolate(self.__altitude, self.__he, height_asl)
        return concentration
# ---------------------------------------------------------------------------------------------

    def __hconcentration(self, height_asl):
        if height_asl < 86000.0:
            concentration = 0.0
        else:
            concentration = StandardAtmosphere.__interpolate(self.__altitude, self.__h, height_asl)
        return concentration
# ---------------------------------------------------------------------------------------------

    @staticmethod
    def __list_to_array(distance):
        try:
            distance = np.float32(distance)
        except ValueError as ve:
            sys.exit(ve)
        return distance
# ---------------------------------------------------------------------------------------------

    @staticmethod
    def __test_for_strings(distance):
        if isinstance(distance, str):
            sys.exit("input into std_atmo function cannot be a str")
        return
# ---------------------------------------------------------------------------------------------

    @staticmethod
    def __interpolate(array1, array2, value):
        """

        :param array1: float
        :param array2: float
        :param value: float
        :return interp: float
        """
        f = interp1d(array1, array2)
        return f(value)
# ---------------------------------------------------------------------------------------------

    @staticmethod
    def __verify_range(height_asl):
        if np.size(height_asl) == 1:
            if height_asl > 1000000.0 or height_asl < -5000.0:
                sys.exit("Values not between -5000 m and 1000000 m")
        else:
            for i in range(len(height_asl)):
                if height_asl[i] > 1000000.0 or height_asl[i] < -5000.0:
                    sys.exit("Values not between -5000 m and 1000000 m")
        return

# eof
